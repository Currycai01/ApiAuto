{"name": "获取城市", "status": "broken", "statusDetails": {"message": "TypeError: the JSON object must be str, bytes or bytearray, not Response", "trace": "self = <test_request.TestRequest object at 0x00000252A0F8CF70>\n\n    @allure.title('获取城市')\n    @allure.testcase('获取城市名称')\n    def test_city(self):\n        url = \"https://jisutqybmf.market.alicloudapi.com/weather/city\"\n        headers = {'Authorization': 'appcode 8d54e478bbcc4364ab46a2a0a9f1b8de'}\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(url=url, headers=headers, verify=False)\n        response.encoding = \"utf-8\"\n        #print(response.text)\n        global city\n        #city = \"北京\"\n>       city = jsonpath(json.loads(response),\"$.result[2].city\")\n\nTestCase\\test_request.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = <Response [200]>, cls = None, object_hook = None, parse_float = None\nparse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not Response\n\nD:\\install\\Python\\lib\\json\\__init__.py:339: TypeError"}, "start": 1712831706024, "stop": 1712831706885, "uuid": "54b181b3-02e9-4a16-acb3-30ee65c7a4cc", "historyId": "f9dee3049600af938bcdf980b9633995", "testCaseId": "f9dee3049600af938bcdf980b9633995", "fullName": "TestCase.test_request.TestRequest#test_city", "labels": [{"name": "parentSuite", "value": "TestCase"}, {"name": "suite", "value": "test_request"}, {"name": "subSuite", "value": "TestRequest"}, {"name": "host", "value": "DESKTOP-5TJAGBN"}, {"name": "thread", "value": "12144-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.test_request"}], "links": [{"type": "tms", "url": "获取城市名称", "name": "获取城市名称"}]}